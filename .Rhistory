tab_header(
title = md("**Calibration Slope by Fraction**")
) %>%
fmt_number(
columns = c(fraction, slope),
decimals = 3
) %>%
tab_style(
style = cell_text(align = "center"),
locations = cells_body(columns = everything())
) %>%
tab_options(
table.font.size = 14,
data_row.padding = px(4)
)
library(dplyr)
library(gt)
target_slope <- 0.9  # <-- define before mutate()
table_df <- results %>%
mutate(percent_of_target = slope / target_slope) %>%  # proportion 0–1
arrange(desc(slope))
table_df %>%
gt() %>%
tab_header(title = md("**Calibration Slope by Fraction**")) %>%
cols_label(
fraction = "Fraction",
slope = "Slope",
percent_of_target = "% of Target (0.9)"
) %>%
fmt_number(columns = c(fraction, slope), decimals = 3) %>%
fmt_percent(columns = percent_of_target, decimals = 1) %>%
tab_style(
style = cell_text(align = "center"),
locations = cells_body(columns = everything())
) %>%
tab_options(table.font.size = 14, data_row.padding = px(4))
fractions <- seq(0.00, 1.2, by = 0.1) # exclude 0 to avoid errors
slopes <- vapply(fractions, find_cs, numeric(1))
slopes <- vapply(fractions, find_cs, numeric(1))
fractions <- seq(0.1, 1.2, by = 0.05) # exclude 0 to avoid errors
slopes <- vapply(fractions, find_cs, numeric(1))
results <- data.frame(
fraction = fractions,
slope    = slopes
)
sample_fraction <- 0.70
slope_at_sample_fraction <- results$slope[which.min(abs(results$fraction - sample_fraction))]
ggplot(results, aes(x = fraction, y = slope)) +
geom_point(size = 3, colour = "#0072B2") +
geom_line(linewidth = 1, colour = "#0072B2") +
# Horizontal line for target slope
geom_hline(yintercept = 0.9, linetype = "dashed", colour = "red", linewidth = 0.8) +
annotate("text", x = 0.05, y = 0.92, label = "Target = 0.9",
hjust = 0, colour = "red", size = 4) +
# Vertical line for sample fraction
geom_vline(xintercept = sample_fraction, linetype = "dotted",
colour = "grey40", linewidth = 1) +
# Label moved slightly below the point
annotate("text",
x = sample_fraction,
y = slope_at_sample_fraction - 0.10,   # moved down
label = paste0("At sample fraction 0.7, Slope = ", round(slope_at_target, 2)),
colour = "grey20", size = 4, fontface = "italic", hjust = 0.5) +
labs(
x = "Fraction",
y = "Calibration slope",
title = "Calibration Slope by Fraction"
) +
coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
panel.grid.minor = element_blank()
)
sample_fraction <- 0.70
slope_at_sample_fraction <- results$slope[which.min(abs(results$fraction - sample_fraction))]
ggplot(results, aes(x = fraction, y = slope)) +
geom_point(size = 3, colour = "#0072B2") +
geom_line(linewidth = 1, colour = "#0072B2") +
# Horizontal line for target slope
geom_hline(yintercept = 0.9, linetype = "dashed", colour = "red", linewidth = 0.8) +
annotate("text", x = 0.05, y = 0.92, label = "Target = 0.9",
hjust = 0, colour = "red", size = 4) +
# Vertical line for sample fraction
geom_vline(xintercept = sample_fraction, linetype = "dotted",
colour = "grey40", linewidth = 1) +
# Label moved slightly below the point
annotate("text",
x = sample_fraction,
y = slope_at_sample_fraction - 0.10,   # moved down
label = paste0("At sample fraction 0.7, Slope = ", round(slope_at_target, 2)),
colour = "grey20", size = 4, fontface = "italic", hjust = 0.5) +
labs(
x = "Fraction",
y = "Calibration slope",
title = "Calibration Slope by Fraction"
) +
coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
panel.grid.minor = element_blank()
)
fractions <- seq(0.01, 1.21, by = 0.05) # exclude 0 to avoid errors
slopes <- vapply(fractions, find_cs, numeric(1))
results <- data.frame(
fraction = fractions,
slope    = slopes
)
sample_fraction <- 0.70
slope_at_sample_fraction <- results$slope[which.min(abs(results$fraction - sample_fraction))]
ggplot(results, aes(x = fraction, y = slope)) +
geom_point(size = 3, colour = "#0072B2") +
geom_line(linewidth = 1, colour = "#0072B2") +
# Horizontal line for target slope
geom_hline(yintercept = 0.9, linetype = "dashed", colour = "red", linewidth = 0.8) +
annotate("text", x = 0.05, y = 0.92, label = "Target = 0.9",
hjust = 0, colour = "red", size = 4) +
# Vertical line for sample fraction
geom_vline(xintercept = sample_fraction, linetype = "dotted",
colour = "grey40", linewidth = 1) +
# Label moved slightly below the point
annotate("text",
x = sample_fraction,
y = slope_at_sample_fraction - 0.10,   # moved down
label = paste0("At sample fraction 0.7, Slope = ", round(slope_at_target, 2)),
colour = "grey20", size = 4, fontface = "italic", hjust = 0.5) +
labs(
x = "Fraction",
y = "Calibration slope",
title = "Calibration Slope by Fraction"
) +
coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
panel.grid.minor = element_blank()
)
fractions <- seq(0.01, 1.21, by = 0.10) # exclude 0 to avoid errors
slopes <- vapply(fractions, find_cs, numeric(1))
results <- data.frame(
fraction = fractions,
slope    = slopes
)
sample_fraction <- 0.70
slope_at_sample_fraction <- results$slope[which.min(abs(results$fraction - sample_fraction))]
ggplot(results, aes(x = fraction, y = slope)) +
geom_point(size = 3, colour = "#0072B2") +
geom_line(linewidth = 1, colour = "#0072B2") +
# Horizontal line for target slope
geom_hline(yintercept = 0.9, linetype = "dashed", colour = "red", linewidth = 0.8) +
annotate("text", x = 0.05, y = 0.92, label = "Target = 0.9",
hjust = 0, colour = "red", size = 4) +
# Vertical line for sample fraction
geom_vline(xintercept = sample_fraction, linetype = "dotted",
colour = "grey40", linewidth = 1) +
# Label moved slightly below the point
annotate("text",
x = sample_fraction,
y = slope_at_sample_fraction - 0.10,   # moved down
label = paste0("At sample fraction 0.7, Slope = ", round(slope_at_target, 2)),
colour = "grey20", size = 4, fontface = "italic", hjust = 0.5) +
labs(
x = "Fraction",
y = "Calibration slope",
title = "Calibration Slope by Fraction"
) +
coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
panel.grid.minor = element_blank()
)
library(dplyr)
library(gt)
target_slope <- 0.9  # <-- define before mutate()
table_df <- results %>%
mutate(percent_of_target = slope / target_slope) %>%  # proportion 0–1
arrange(desc(slope))
table_df %>%
gt() %>%
tab_header(title = md("**Calibration Slope by Fraction**")) %>%
cols_label(
fraction = "Fraction",
slope = "Slope",
percent_of_target = "% of Target (0.9)"
) %>%
fmt_number(columns = c(fraction, slope), decimals = 3) %>%
fmt_percent(columns = percent_of_target, decimals = 1) %>%
tab_style(
style = cell_text(align = "center"),
locations = cells_body(columns = everything())
) %>%
tab_options(table.font.size = 14, data_row.padding = px(4))
library(dplyr)
library(gt)
target_slope <- 0.9  # <-- define before mutate()
table_df <- results %>%
mutate(percent_of_target = slope / target_slope) %>%  # proportion 0–1
arrange(desc(slope))
table_df %>%
gt() %>%
tab_header(title = md("**Calibration Slope by Sample Fraction**")) %>%
cols_label(
fraction = "Fraction",
slope = "Slope",
percent_of_target = "% of Target (0.9)"
) %>%
fmt_number(columns = c(fraction, slope), decimals = 3) %>%
fmt_percent(columns = percent_of_target, decimals = 1) %>%
tab_style(
style = cell_text(align = "center"),
locations = cells_body(columns = everything())
) %>%
tab_options(table.font.size = 14, data_row.padding = px(4))
library(dplyr)
library(gt)
target_slope <- 0.9
table_df <- results %>%
mutate(percent_of_target = slope / target_slope) %>%
arrange(desc(slope))
table_df %>%
gt() %>%
tab_header(title = md("**Calibration Slope by Sample Fraction**")) %>%
cols_label(
fraction = "Fraction",
slope = "Slope",
percent_of_target = "% of Target (0.9)"
) %>%
fmt_number(columns = c(fraction, slope), decimals = 3) %>%
fmt_percent(columns = percent_of_target, decimals = 1) %>%
tab_style(
style = cell_text(align = "center"),
locations = cells_body(columns = everything())
) %>%
tab_options(table.font.size = 14, data_row.padding = px(4))
#| include: false
# Load required libraries
library(knitr)
library(dplyr)
library(tidyr)
library(gt)
# Load results
results <- read.csv("validation_results.csv")
# Calculate summary statistics for each method
summary_stats <- results %>%
group_by(method) %>%
summarise(
# AUC
auc_mean = mean(internal_auc),
auc_sd = sd(internal_auc),
# Calibration Slope
cal_slope_mean = mean(internal_cal_slope),
cal_slope_sd = sd(internal_cal_slope),
# Brier Score
brier_mean = mean(internal_brier),
brier_sd = sd(internal_brier),
# MAPE
mape_mean = mean(internal_mape),
mape_sd = sd(internal_mape)
)
# Get apparent values (same for all methods, just take first)
apparent_stats <- results %>%
filter(method == "Sample Split") %>%
summarise(
auc_mean = mean(apparent_auc),
auc_sd = sd(apparent_auc),
cal_slope_mean = mean(apparent_cal_slope),
cal_slope_sd = sd(apparent_cal_slope),
brier_mean = mean(apparent_brier),
brier_sd = sd(apparent_brier),
mape_mean = mean(apparent_mape),
mape_sd = sd(apparent_mape)
) %>%
mutate(method = "Apparent")
# Get external values
external_stats <- results %>%
filter(method == "Sample Split") %>%
summarise(
auc_mean = mean(external_auc),
auc_sd = sd(external_auc),
cal_slope_mean = mean(external_cal_slope),
cal_slope_sd = sd(external_cal_slope),
brier_mean = mean(external_brier),
brier_sd = sd(external_brier),
mape_mean = mean(external_mape),
mape_sd = sd(external_mape)
) %>%
mutate(method = "External")
# Combine all statistics
all_stats <- bind_rows(apparent_stats, summary_stats, external_stats)
# Calculate bias and RMSE
bias_rmse <- results %>%
group_by(method) %>%
summarise(
auc_bias = mean(internal_auc - external_auc),
auc_rmse = sqrt(mean((internal_auc - external_auc)^2)),
cal_slope_bias = mean(internal_cal_slope - external_cal_slope),
cal_slope_rmse = sqrt(mean((internal_cal_slope - external_cal_slope)^2)),
brier_bias = mean(internal_brier - external_brier),
brier_rmse = sqrt(mean((internal_brier - external_brier)^2)),
mape_bias = mean(internal_mape - external_mape),
mape_rmse = sqrt(mean((internal_mape - external_mape)^2))
)
# Extract key values for inline text
bootstrap_cal_sd <- all_stats %>% filter(method == "Bootstrap") %>% pull(cal_slope_sd)
cv_cal_sd <- all_stats %>% filter(method == "Cross-validation") %>% pull(cal_slope_sd)
split_cal_sd <- all_stats %>% filter(method == "Sample Split") %>% pull(cal_slope_sd)
bootstrap_auc_bias <- bias_rmse %>% filter(method == "Bootstrap") %>% pull(auc_bias)
bootstrap_cal_bias <- bias_rmse %>% filter(method == "Bootstrap") %>% pull(cal_slope_bias)
bootstrap_cal_rmse <- bias_rmse %>% filter(method == "Bootstrap") %>% pull(cal_slope_rmse)
split_bootstrap_ratio <- split_cal_sd / bootstrap_cal_sd
# CALCULATE DGP PARAMETERS FROM CODE
# (These match what's in simulation_code.R)
# Expit function
expit <- function(x) 1 / (1 + exp(-x))
# Generate sample to calculate intercept
set.seed(123)
n_sample <- 10000
X_sample <- replicate(10, rnorm(n_sample))
# Beta coefficients (from simulation)
beta <- c(0.45, 0.40, -0.35, 0.30, -0.25, 0.20, 0.15, 0.10, 0.08, 0.05)
target_prev <- 0.15
# Calculate intercept
find_alpha <- function(a) {
mean(expit(a + as.vector(X_sample %*% beta))) - target_prev
}
alpha <- uniroot(find_alpha, c(-10, 10))$root
# Calculate sample size using samplesizedev (matching simulation_code.R)
library(samplesizedev)
sample_size_params <- list(
p = length(beta),        # 10 predictors
phi = target_prev,       # 15% prevalence
c = 0.75,               # Target C-statistic
S = 0.90                # Target calibration slope (accounting for shrinkage)
)
res <- samplesizedev(
p = sample_size_params$p,
phi = sample_size_params$phi,
c = sample_size_params$c,
S = sample_size_params$S
)
# Use Pavlou et al. simulation method (as in simulation_code.R)
n_dev <- ceiling(res$sim)
n_events <- ceiling(n_dev * sample_size_params$phi)
epv <- n_events / length(beta)
n_ext <- 100000
alpha
alpha
p = 10
I = 0.12
N = (10*p)/I
print(N)
library(samplesizedev)
res <- samplesizedev(outcome = "Binary", S = 0.9, phi = 0.12, c = 0.70, p = 10)
res$sim
suppress_plots <- function(expr) {
fn <- tempfile(fileext = ".pdf")
grDevices::pdf(fn)
on.exit({
try(grDevices::dev.off(), silent = TRUE)
unlink(fn, force = TRUE)
}, add = TRUE)
force(expr)
}
find_cs <- function(x) {
frac <- as.integer(round(1515 * x))
res <- suppress_plots(
expected_performance(outcome = "Binary", n = frac, phi = 0.15, c = 0.8, p = 10)
)
x <- as.numeric(res["Mean_calibration_slope", 1])
return(x)
}
fractions <- seq(0.01, 1.21, by = 0.10) # exclude 0 to avoid errors
slopes <- vapply(fractions, find_cs, numeric(1))
results <- data.frame(
fraction = fractions,
slope    = slopes
)
library(ggplot2)
sample_fraction <- 0.70
slope_at_sample_fraction <- results$slope[which.min(abs(results$fraction - sample_fraction))]
ggplot(results, aes(x = fraction, y = slope)) +
geom_point(size = 3, colour = "#0072B2") +
geom_line(linewidth = 1, colour = "#0072B2") +
# Horizontal line for target slope
geom_hline(yintercept = 0.9, linetype = "dashed", colour = "red", linewidth = 0.8) +
annotate("text", x = 0.05, y = 0.92, label = "Target = 0.9",
hjust = 0, colour = "red", size = 4) +
# Vertical line for sample fraction
geom_vline(xintercept = sample_fraction, linetype = "dotted",
colour = "grey40", linewidth = 1) +
# Label moved slightly below the point
annotate("text",
x = sample_fraction,
y = slope_at_sample_fraction - 0.10,   # moved down
label = paste0("At sample fraction 0.7, Slope = ", round(slope_at_sample_fraction, 2)),
colour = "grey20", size = 4, fontface = "italic", hjust = 0.5) +
labs(
x = "Fraction",
y = "Calibration slope",
title = "Calibration Slope by Fraction"
) +
coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
panel.grid.minor = element_blank()
)
library(dplyr)
library(gt)
target_slope <- 0.9
table_df <- results %>%
mutate(percent_of_target = slope / target_slope) %>%
arrange(desc(slope))
table_df %>%
gt() %>%
tab_header(title = md("**Calibration Slope by Sample Fraction**")) %>%
cols_label(
fraction = "Fraction",
slope = "Slope",
percent_of_target = "% of Target (0.9)"
) %>%
fmt_number(columns = c(fraction, slope), decimals = 3) %>%
fmt_percent(columns = percent_of_target, decimals = 1) %>%
tab_style(
style = cell_text(align = "center"),
locations = cells_body(columns = everything())
) %>%
tab_options(table.font.size = 14, data_row.padding = px(4))
p = 10
I = 0.12
N = (10*p)/I
print(N)
library(samplesizedev)
res <- samplesizedev(outcome = "Binary", S = 0.9, phi = 0.12, c = 0.70, p = 10)
res$sim
suppress_plots <- function(expr) {
fn <- tempfile(fileext = ".pdf")
grDevices::pdf(fn)
on.exit({
try(grDevices::dev.off(), silent = TRUE)
unlink(fn, force = TRUE)
}, add = TRUE)
force(expr)
}
find_cs <- function(x) {
frac <- as.integer(round(726 * x))
res <- suppress_plots(
expected_performance(outcome = "Binary", n = frac, phi = 0.15, c = 0.8, p = 10)
)
x <- as.numeric(res["Mean_calibration_slope", 1])
return(x)
}
fractions <- seq(0.01, 1.21, by = 0.10) # exclude 0 to avoid errors
slopes <- vapply(fractions, find_cs, numeric(1))
results <- data.frame(
fraction = fractions,
slope    = slopes
)
library(ggplot2)
sample_fraction <- 0.70
slope_at_sample_fraction <- results$slope[which.min(abs(results$fraction - sample_fraction))]
ggplot(results, aes(x = fraction, y = slope)) +
geom_point(size = 3, colour = "#0072B2") +
geom_line(linewidth = 1, colour = "#0072B2") +
# Horizontal line for target slope
geom_hline(yintercept = 0.9, linetype = "dashed", colour = "red", linewidth = 0.8) +
annotate("text", x = 0.05, y = 0.92, label = "Target = 0.9",
hjust = 0, colour = "red", size = 4) +
# Vertical line for sample fraction
geom_vline(xintercept = sample_fraction, linetype = "dotted",
colour = "grey40", linewidth = 1) +
# Label moved slightly below the point
annotate("text",
x = sample_fraction,
y = slope_at_sample_fraction - 0.10,   # moved down
label = paste0("At sample fraction 0.7, Slope = ", round(slope_at_sample_fraction, 2)),
colour = "grey20", size = 4, fontface = "italic", hjust = 0.5) +
labs(
x = "Fraction",
y = "Calibration slope",
title = "Calibration Slope by Fraction"
) +
coord_cartesian(xlim = c(0, 1), ylim = c(0, 1)) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
panel.grid.minor = element_blank()
)
library(dplyr)
library(gt)
target_slope <- 0.9
table_df <- results %>%
mutate(percent_of_target = slope / target_slope) %>%
arrange(desc(slope))
table_df %>%
gt() %>%
tab_header(title = md("**Calibration Slope by Sample Fraction**")) %>%
cols_label(
fraction = "Fraction",
slope = "Slope",
percent_of_target = "% of Target (0.9)"
) %>%
fmt_number(columns = c(fraction, slope), decimals = 3) %>%
fmt_percent(columns = percent_of_target, decimals = 1) %>%
tab_style(
style = cell_text(align = "center"),
locations = cells_body(columns = everything())
) %>%
tab_options(table.font.size = 14, data_row.padding = px(4))
source("~/Documents/internal_validation_paper/simulation_code.R")
